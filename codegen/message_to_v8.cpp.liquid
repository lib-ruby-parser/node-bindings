// This file is autogenerated by {{ template }}

#include "lib-ruby-parser.hpp"
#include "to_v8.hpp"

#ifdef LIB_RUBY_PARSER_DEBUG
#include <iostream>
#endif

{% for message in messages %}
decl_to_v8_for(lib_ruby_parser::{{ message.camelcase_name }});
template <>
Napi::Value ToV8<lib_ruby_parser::{{ message.camelcase_name }}>(
    lib_ruby_parser::{{ message.camelcase_name }} value,
    Napi::Env &env,
    Napi::Object &objects)
{
#ifdef LIB_RUBY_PARSER_DEBUG
    std::cerr << "ToV8({{ message.camelcase_name }})\n";
#endif
    GetObject({{ message.camelcase_name }});
    return {{ message.camelcase_name }}.New({
        {%- for field in message.fields %}
        ToV8(std::move(value.{{ field.snakecase_name | escape_cpp_keyword }}), env, objects),
        {%- endfor %}
    });
}
{% endfor %}

template <>
Napi::Value ToV8<lib_ruby_parser::DiagnosticMessage>(
    lib_ruby_parser::DiagnosticMessage value,
    Napi::Env &env,
    Napi::Object &objects)
{
#ifdef LIB_RUBY_PARSER_DEBUG
    std::cerr << "ToV8(DiagnosticMessage)\n";
#endif
    switch (value.tag)
    {
        {%- for message in messages %}
        case lib_ruby_parser::DiagnosticMessage::Tag::{{ message.camelcase_name | camelcase_to_snakecase | upcase | escape_cpp_keyword }}:
            return ToV8(std::move(value.as.{{ message.camelcase_name | camelcase_to_snakecase | escape_cpp_keyword }}), env, objects);
        {%- endfor %}
    }
#ifdef LIB_RUBY_PARSER_DEBUG
    std::cerr << "Unknown message variant??\n";
#endif
}
