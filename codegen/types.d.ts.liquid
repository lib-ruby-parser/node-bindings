// This file is autogenerated by {{ template }}

export function parse(
    input: string,
    buffer_name: string,
    decoder: (encoding: string, input: Uint8Array) => Uint8Array
): ParserResult;

export class ParserResult {
    ast: Node | null;
    tokens: Token[];
    diagnostics: Diagnostic[];
    comments: Comment[];
    magic_comments: MagicComment[];
    input: DecodedInput;

    constructor(
        ast: Node | null,
        tokens: Token[],
        diagnostics: Diagnostic[],
        comments: Comment[],
        magic_comments: MagicComment[],
        input: DecodedInput,
    );
}

export class Token {
    token_type: number;
    token_value: Uint8Array;
    loc: Loc;
    lex_state_before: number;
    lex_state_after: number;

    constructor(
        token_type: number,
        token_value: Uint8Array,
        loc: Loc,
        lex_state_before: number,
        lex_state_after: number,
    );

    name(): string;
}


export class Loc {
    begin: number;
    end: number;

    constructor(
        begin: number,
        end: number,
    );
}

export class Comment {
    loc: Loc;
    kind: CommentKind;

    constructor(
        loc: Loc,
        kind: CommentKind,
    );
}

export type CommentKind =
    | "inline"
    | "document"
    | "unknown";

export class MagicComment {
    kind: MagicCommentKind;
    key_l: Loc;
    value_l: Loc;

    constructor(
        kind: MagicCommentKind,
        key_l: Loc,
        value_l: Loc,
    );
}

export type MagicCommentKind =
    | "encoding"
    | "frozen_string_literal"
    | "warn_indent"
    | "shareable_constant_value";

export class DecodedInput {
    name: string;
    lines: SourceLine[];
    bytes: Uint8Array;

    constructor(
        name: string,
        lines: SourceLine[],
        bytes: Uint8Array,
    );
}

export class SourceLine {
    start: number;
    end: number;
    ends_with_eof: boolean;

    constructor(
        start: number,
        end: number,
        ends_with_eof: boolean,
    );
}

export class Diagnostic {
    level: ErrorLevel;
    message: DiagnosticMessage;
    loc: Loc;

    constructor(
        level: ErrorLevel,
        message: DiagnosticMessage,
        loc: Loc,
    );
}

export type ErrorLevel =
    | "warning"
    | "error";

export class Node {}

export namespace nodes {
    {%- for node in nodes %}
    {{ node.comment | render_comment: "//", 4 }}
    export class {{ node.camelcase_name }} {
        {%- for field in node.fields %}
        {%- case field.field_type -%}
        {%- when "Node" -%}
            {%- assign field_type = "Node" -%}
        {%- when "Nodes" -%}
            {%- assign field_type = "Node[]" -%}
        {%- when "MaybeNode" or "RegexpOptions" -%}
            {%- assign field_type = "Node | null" -%}
        {%- when "Loc" -%}
            {%- assign field_type = "Loc" -%}
        {%- when "MaybeLoc" -%}
            {%- assign field_type = "Loc | null" -%}
        {%- when "Str" or "RawStr" -%}
            {%- assign field_type = "string" -%}
        {%- when "MaybeStr" or "Chars" -%}
            {%- assign field_type = "string | null" -%}
        {%- when "StringValue" -%}
            {%- assign field_type = "Uint8Array" -%}
        {%- when "U8" -%}
            {%- assign field_type = "number" -%}
        {%- else -%}
            {%- assign field_type = "COMPILE ERROR" -%}
        {%- endcase %}
        {{ field.comment | render_comment: "//", 8 }}
        {{ field.snakecase_name | escape_js_keyword }}: {{ field_type }};
        {%- endfor %}

        constructor(
            {%- for field in node.fields %}
            {%- case field.field_type -%}
            {%- when "Node" -%}
                {%- assign field_type = "Node" -%}
            {%- when "Nodes" -%}
                {%- assign field_type = "Node[]" -%}
            {%- when "MaybeNode" or "RegexpOptions" -%}
                {%- assign field_type = "Node | null" -%}
            {%- when "Loc" -%}
                {%- assign field_type = "Loc" -%}
            {%- when "MaybeLoc" -%}
                {%- assign field_type = "Loc | null" -%}
            {%- when "Str" or "RawStr" -%}
                {%- assign field_type = "string" -%}
            {%- when "MaybeStr" or "Chars" -%}
                {%- assign field_type = "string | null" -%}
            {%- when "StringValue" -%}
                {%- assign field_type = "Uint8Array" -%}
            {%- when "U8" -%}
                {%- assign field_type = "number" -%}
            {%- else -%}
                {%- assign field_type = "COMPILE ERROR" -%}
            {%- endcase %}
            {{ field.snakecase_name | escape_js_keyword }}: {{ field_type }},
            {%- endfor %}
        );
    }
    {%- endfor %}
}

export class DiagnosticMessage {}

export namespace messages {
    {%- for message in messages %}
    {{ message.comment | render_comment: "//", 4 }}
    export class {{ message.camelcase_name }} {
        {%- for field in message.fields %}
        {%- case field.field_type -%}
        {%- when "Str" -%}
            {%- assign field_type = "string" -%}
        {%- when "Byte" -%}
            {%- assign field_type = "number" -%}
        {%- else -%}
            {%- assign field_type = "COMPILE ERROR" -%}
        {%- endcase %}
        {{ field.comment | render_comment: "//", 8 }}
        {{ field.snakecase_name | escape_js_keyword }}: {{ field_type }};
        {%- endfor %}

        constructor(
            {%- for field in message.fields %}
            {%- case field.field_type -%}
            {%- when "Str" -%}
                {%- assign field_type = "string" -%}
            {%- when "Byte" -%}
                {%- assign field_type = "number" -%}
            {%- else -%}
                {%- assign field_type = "COMPILE ERROR" -%}
            {%- endcase %}
            {{ field.snakecase_name | escape_js_keyword }}: {{ field_type }},
            {%- endfor %}
        );
    }
    {%- endfor %}
}

export namespace tokens {
    export const id_to_name: { [K in number]: string };
    export const name_to_id: { [K in string]: number };
}
