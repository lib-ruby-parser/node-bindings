name: release
on:
  push:
    tags:
      - 'v*'

env:
  BUILD_ENV: release

jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    steps:
      - name: get version number
        run: |
          echo "GITHUB_TAG=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: print version number
        run: |
          echo "tag = ${{ env.GITHUB_TAG }}"

      - name: create release on github
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.GITHUB_TAG }}
          release_name: v${{ env.GITHUB_TAG }}

      - name: generate env artifact
        run: |
          echo "RELEASE_UPLOAD_URL=${{ steps.create_release.outputs.upload_url }}" > artifact-env
          echo "GITHUB_TAG=$GITHUB_TAG" >> artifact-env

      - name: save env artifact
        uses: actions/upload-artifact@v1
        with:
          name: artifact-env
          path: artifact-env

  build-node-files:
    name: build-node-files
    needs: ['create-release']
    runs-on: ${{ matrix.build.os }}
    env:
      BUILD_ENV: release
    strategy:
      fail-fast: false
      matrix:
        build:
          - { os: ubuntu-latest, output: linux.node }
          - { os: macos-latest, output: darwin.node }
          - { os: windows-latest, output: win32.node }
    steps:
      - name: install wget
        if: runner.os == 'Windows'
        shell: bash
        run: choco install wget --no-progress

      - name: checkout
        uses: actions/checkout@v2

      - name: download env artifact
        uses: actions/download-artifact@v1
        with:
          name: artifact-env
          path: artifact-env

      - name: load env artifact
        shell: bash
        run: cat artifact-env/artifact-env >> $GITHUB_ENV

      - name: install node
        uses: actions/setup-node@v2
        with:
          node-version: 15
          registry-url: 'https://registry.npmjs.org'

      - name: install rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: build
        shell: bash
        run: |
          make setup
          make download-cpp-bindings
          make generate-node-bindings

          make configure
          make build

      - name: Run tests
        shell: bash
        run: |
          make test

      - name: upload assets
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.RELEASE_UPLOAD_URL }}
          asset_path: build/Release/ruby_parser.node
          asset_name: ${{ matrix.build.output }}
          asset_content_type: application/octet-stream

      - name: save .node file as artifact
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.build.output }}
          path: build/Release/ruby_parser.node

  build-typescript-defs:
    name: build-typescript-defs
    needs: ['create-release']
    runs-on: ubuntu-latest
    env:
      BUILD_ENV: release
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: install rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: generate types.d.ts
        run: make generate-node-bindings

      - name: save types.d.ts file as artifact
        uses: actions/upload-artifact@v1
        with:
          name: types.d.ts
          path: types.d.ts


  build-package:
    name: build-package
    needs: ['build-node-files']
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: install node
        uses: actions/setup-node@v2
        with:
          node-version: 15
          registry-url: 'https://registry.npmjs.org'

      - name: download linux artifact
        uses: actions/download-artifact@v1
        with:
          name: linux.node
          path: linux.node

      - name: download macos artifact
        uses: actions/download-artifact@v1
        with:
          name: darwin.node
          path: darwin.node

      - name: download windows artifact
        uses: actions/download-artifact@v1
        with:
          name: win32.node
          path: win32.node

      - name: download types.d.ts artifact
        uses: actions/download-artifact@v1
        with:
          name: types.d.ts
          path: types.d.ts

      - name: download env artifact
        uses: actions/download-artifact@v1
        with:
          name: artifact-env
          path: artifact-env

      - name: load env artifact
        run: cat artifact-env/artifact-env >> $GITHUB_ENV

      - name: build package
        run: |
          ls -l linux.node/
          ls -l darwin.node/
          ls -l win32.node/
          ls -l types.d.ts/

          cp linux.node/ruby_parser.node pkg/linux.node
          cp darwin.node/ruby_parser.node pkg/darwin.node
          cp win32.node/ruby_parser.node pkg/win32.node
          cp LICENSE pkg/
          cp README.md pkg/
          cp types.d.ts/types.d.ts pkg/index.d.ts
          cd pkg

          npm version "$GITHUB_TAG" --no-git-tag-version
          npm pack
          ls -l

      - name: upload assets
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.RELEASE_UPLOAD_URL }}
          asset_path: pkg/lib-ruby-parser-${{ env.GITHUB_TAG }}.tgz
          asset_name: lib-ruby-parser-${{ env.GITHUB_TAG }}.tgz
          asset_content_type: application/octet-stream

      - name: save .tgz package as artifact
        uses: actions/upload-artifact@v1
        with:
          name: lib-ruby-parser-${{ env.GITHUB_TAG }}.tgz
          path: pkg/lib-ruby-parser-${{ env.GITHUB_TAG }}.tgz

  test-package:
    name: test-package
    needs: ['build-package']
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        node: [ '10', '12', '14', '15' ]
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: install node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}
          registry-url: 'https://registry.npmjs.org'

      - name: download env artifact
        uses: actions/download-artifact@v1
        with:
          name: artifact-env
          path: artifact-env

      - name: load env artifact
        shell: bash
        run: cat artifact-env/artifact-env >> $GITHUB_ENV

      - name: download .tgz artifact
        uses: actions/download-artifact@v1
        with:
          name: lib-ruby-parser-${{ env.GITHUB_TAG }}.tgz
          path: lib-ruby-parser-${{ env.GITHUB_TAG }}.tgz

      - name: test
        shell: bash
        run: |
          mkdir test
          cd test
          echo "{}" > package.json
          npm install ../lib-ruby-parser-${{ env.GITHUB_TAG }}.tgz/lib-ruby-parser-${{ env.GITHUB_TAG }}.tgz

          node -e "console.log(require.resolve('lib-ruby-parser'))"
          node -e "console.log(require('lib-ruby-parser').parse(new Uint8Array(), {}))"

  publish-package:
    name: publish-package
    needs: ['test-package']
    runs-on: ubuntu-latest
    steps:
      - name: download env artifact
        uses: actions/download-artifact@v1
        with:
          name: artifact-env
          path: artifact-env

      - name: load env artifact
        run: cat artifact-env/artifact-env >> $GITHUB_ENV

      - name: download .tgz artifact
        uses: actions/download-artifact@v1
        with:
          name: lib-ruby-parser-${{ env.GITHUB_TAG }}.tgz
          path: lib-ruby-parser-${{ env.GITHUB_TAG }}.tgz

      - name: install node
        uses: actions/setup-node@v2
        with:
          node-version: 15
          registry-url: 'https://registry.npmjs.org'

      - name: publish
        run: npm publish $PWD/lib-ruby-parser-${{ env.GITHUB_TAG }}.tgz/lib-ruby-parser-${{ env.GITHUB_TAG }}.tgz
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
